@page "/wfcomments/delete"
@using Microsoft.AspNetCore.Authorization
@using Microsoft.EntityFrameworkCore
@using IntroProject.Models
@inject IDbContextFactory<IntroProject.Data.ApplicationDbContext> DbFactory
@inject NavigationManager NavigationManager
@attribute [Authorize(Roles = "Admin")]

<PageTitle>Delete</PageTitle>

<h1>Delete</h1>

<p>Are you sure you want to delete this?</p>
<div>
    <h2>WFComment</h2>
    <hr />
    @if (wfcomment is null)
    {
        <p><em>Loading...</em></p>
    }
    else {
        <dl class="row">
            <dt class="col-sm-2">PostId</dt>
            <dd class="col-sm-10">@wfcomment.PostId</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">UserId</dt>
            <dd class="col-sm-10">@wfcomment.UserId</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">Content</dt>
            <dd class="col-sm-10">@wfcomment.Content</dd>
        </dl>
        <EditForm method="post" Model="wfcomment" OnValidSubmit="DeleteWFComment" FormName="delete" Enhance>
            <button type="submit" class="btn btn-danger" disabled="@(wfcomment is null)">Delete</button> |
            <a href="/wfcomments">Back to List</a>
        </EditForm>
    }
</div>

@code {
    private WFComment? wfcomment;

    [SupplyParameterFromQuery]
    private int CommentId { get; set; }

    protected override async Task OnInitializedAsync()
    {
        using var context = DbFactory.CreateDbContext();
        wfcomment = await context.Comments.FirstOrDefaultAsync(m => m.CommentId == CommentId);

        if (wfcomment is null)
        {
            NavigationManager.NavigateTo("notfound");
        }
    }

    private async Task DeleteWFComment()
    {
        using var context = DbFactory.CreateDbContext();
        context.Comments.Remove(wfcomment!);
        await context.SaveChangesAsync();
        NavigationManager.NavigateTo("/wfcomments");
    }
}
