@page "/posts/create"
@using Microsoft.AspNetCore.Authorization
@using Microsoft.EntityFrameworkCore
@using IntroProject.Models
@inject IDbContextFactory<IntroProject.Data.WebForumDbContext> DbFactory
@inject NavigationManager NavigationManager
@attribute [Authorize]
<PageTitle>Create</PageTitle>

<h1>Create</h1>

<h2>Post</h2>
<hr />
<div class="row">
    <div class="col-md-4">
        <EditForm method="post" Model="Post" OnValidSubmit="AddPost" FormName="create" Enhance>
            <DataAnnotationsValidator />
            <ValidationSummary class="text-danger" role="alert"/>
            <div class="mb-3">
                <label for="contents" class="form-label">Contents:</label> 
                <InputText id="contents" @bind-Value="Post.Contents" class="form-control" /> 
                <ValidationMessage For="() => Post.Contents" class="text-danger" /> 
            </div>        
            <div class="mb-3">
                <label for="user_id" class="form-label">User_id:</label> 
                <InputNumber id="user_id" @bind-Value="Post.User_id" class="form-control" /> 
                <ValidationMessage For="() => Post.User_id" class="text-danger" /> 
            </div>        
            <button type="submit" class="btn btn-primary">Create</button>
        </EditForm>
    </div>
</div>

<div>
    <a href="/posts">Back to List</a>
</div>

@code {
    [SupplyParameterFromForm]
    private Post Post { get; set; } = new();

    // To protect from overposting attacks, see https://learn.microsoft.com/aspnet/core/blazor/forms/#mitigate-overposting-attacks.
    private async Task AddPost()
    {
        using var context = DbFactory.CreateDbContext();
        context.Post.Add(Post);
        await context.SaveChangesAsync();
        NavigationManager.NavigateTo("/posts");
    }
}
