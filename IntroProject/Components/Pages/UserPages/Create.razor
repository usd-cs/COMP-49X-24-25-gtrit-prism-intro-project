@page "/users/create"
@using Microsoft.EntityFrameworkCore
@using IntroProject.Models
@inject IDbContextFactory<IntroProject.Data.IntroProjectContext> DbFactory
@inject NavigationManager NavigationManager

<PageTitle>Create</PageTitle>

<h1>Create</h1>

<h2>User</h2>
<hr />
<div class="row">
    <div class="col-md-4">
        <EditForm Model="User" OnValidSubmit="AddUser" FormName="createUserForm">
            <DataAnnotationsValidator />
            <ValidationSummary class="text-danger" />
            <div class="mb-3">
                <label for="name" class="form-label">Name:</label>
                <InputText id="name" @bind-Value="User.Name" class="form-control" />
                <ValidationMessage For="() => User.Name" class="text-danger" />
            </div>
            <div class="mb-3">
                <label for="email" class="form-label">Email:</label>
                <InputText id="email" @bind-Value="User.Email" class="form-control" />
                <ValidationMessage For="() => User.Email" class="text-danger" />
            </div>
            <div class="mb-3">
                <label for="password" class="form-label">Password:</label>
                <InputText id="password" @bind-Value="User.Password" class="form-control" />
                <ValidationMessage For="() => User.Password" class="text-danger" />
            </div>
            <div class="mb-3">
                <label for="admin" class="form-label">Admin:</label>
                <InputCheckbox id="admin" @bind-Value="User.Admin" class="form-check-input" />
                <ValidationMessage For="() => User.Admin" class="text-danger" />
            </div>
            <button type="submit" class="btn btn-primary">Create</button>
        </EditForm>
    </div>
</div>

@code {
    [SupplyParameterFromForm]
    private User User { get; set; } = new();

    private async Task AddUser()
    {
        if (string.IsNullOrEmpty(User.Password))
        {
            // Handle the error, e.g., show a validation message
            return;
        }

        using var context = DbFactory.CreateDbContext();
        User.Password = BCrypt.Net.BCrypt.HashPassword(User.Password); // Use BCrypt for hashing
        context.User.Add(User);
        await context.SaveChangesAsync();
        NavigationManager.NavigateTo("/users");
    }

    private void NavigateToLogin()
    {
        NavigationManager.NavigateTo("/login");
    }
}
