@page "/wfposts"
@using Microsoft.EntityFrameworkCore
@using IntroProject.Models
@using IntroProject.Data
@implements IAsyncDisposable
@inject IDbContextFactory<IntroProject.Data.ApplicationDbContext> DbFactory
@inject NavigationManager NavigationManager

<PageTitle>List All Posts</PageTitle>

<h1>List All Posts</h1>

<p>
    <a href="wfposts/create">Create New</a>
</p>

@if (posts == null)
{
    <p>Loading...</p>
}
else
{
    @foreach (var post in posts)
    {
        <div class="post">
            <h4>@post.Content</h4>
            <p><strong>Posted by:</strong> @post.User?.UserName"</p>
            <div class="actions">
                <a href="/wfposts/edit?postid=@post.PostId">Edit</a> |
                <a href="/wfposts/details?postid=@post.PostId">Details</a> |
                <a href="/wfposts/delete?postid=@post.PostId">Delete</a> |
                <button @onclick="() => NavigateToComment(post.PostId)">Comment</button>
            </div>
            <h5>Comments:</h5>
            @if (post.Comments != null && post.Comments.Any())
            {
                <ul>
                    @foreach (var comment in post.Comments)
                    {
                        <li>
                            <p>@comment.Content</p>
                            <p><strong>Commented by:</strong> @comment.User?.UserName ?? "Unknown User"</p>
                        </li>
                    }
                </ul>
            }
            else
            {
                <p>No comments yet.</p>
            }
        </div>
        <hr />
    }
}

@code {
    private ApplicationDbContext context = default!;
    private List<WFPost>? posts;

    protected override async Task OnInitializedAsync()
    {
        context = DbFactory.CreateDbContext();
        posts = await context.Posts
            .Include(p => p.User)
            .Include(p => p.Comments)
                .ThenInclude(c => c.User)
            .ToListAsync();
    }

    private void NavigateToComment(int postId)
    {
        NavigationManager.NavigateTo($"/wfcomments/create?postId={postId}");
    }

    public async ValueTask DisposeAsync() => await context.DisposeAsync();
}
